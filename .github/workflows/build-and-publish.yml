name: Build and Publish

# This workflow:
# 1. Runs unit tests first (fails fast if tests don't pass)
# 2. Only builds artifacts if tests pass
# 3. Creates cross-platform executables for Windows and Linux
# 4. Uploads test results and build artifacts

on:
  push:
    branches: [ "main", "master", "develop" ]
  pull_request:
    branches: [ "main", "master" ]

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Restore dependencies
      run: dotnet restore rgupdate.sln --verbosity normal

    - name: Build for testing
      run: dotnet build rgupdate.sln --configuration Release --no-restore --verbosity normal

    - name: Run cross-platform tests
      run: dotnet test rgupdate.sln --configuration Release --no-build --verbosity normal --logger trx --results-directory ./TestResults --filter "FullyQualifiedName!~WindowsPathHandlingTests"

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-linux
        path: ./TestResults/*.trx
        retention-days: 30

  test-windows:
    runs-on: windows-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Restore dependencies
      run: dotnet restore rgupdate.sln --verbosity normal

    - name: Build for testing
      run: dotnet build rgupdate.sln --configuration Release --no-restore --verbosity normal

    - name: Run Windows-specific PATH tests
      run: dotnet test rgupdate.sln --configuration Release --no-build --verbosity normal --logger trx --results-directory ./TestResults --filter "FullyQualifiedName~WindowsPathHandlingTests"

    - name: Upload Windows test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-windows
        path: ./TestResults/*.trx
        retention-days: 30

  build:
    needs: [test, test-windows]
    timeout-minutes: 30
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        include:
          - os: windows-latest
            runtime: win-x64
            artifact-name: rgupdate-windows
            executable-extension: .exe
          - os: ubuntu-latest
            runtime: linux-x64
            artifact-name: rgupdate-linux
            executable-extension: ""

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Restore dependencies
      run: dotnet restore rgupdate.sln --verbosity normal
      env:
        DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER: 0

    - name: Build
      run: dotnet build rgupdate.sln --configuration Release --no-restore --verbosity normal

    - name: Publish
      run: dotnet publish src/rgupdate/rgupdate.csproj --configuration Release --runtime ${{ matrix.runtime }} --self-contained true --output ./publish/${{ matrix.runtime }}

    - name: Create artifact directory
      shell: bash
      run: |
        mkdir -p ./artifacts
        # For single-file executables, just copy the main executable
        if [ "${{ matrix.runtime }}" = "win-x64" ]; then
          cp ./publish/${{ matrix.runtime }}/rgupdate.exe ./artifacts/
        else
          cp ./publish/${{ matrix.runtime }}/rgupdate ./artifacts/
        fi
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact-name }}
        path: ./artifacts/
        retention-days: 90

  create-release-info:
    needs: [test, test-windows, build]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create build info
      run: |
        echo "# Build Information" > build-info.md
        echo "" >> build-info.md
        echo "**Commit:** ${{ github.sha }}" >> build-info.md
        echo "**Branch:** ${{ github.ref_name }}" >> build-info.md
        echo "**Build Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> build-info.md
        echo "**Workflow:** ${{ github.workflow }}" >> build-info.md
        echo "**Run Number:** ${{ github.run_number }}" >> build-info.md
        echo "" >> build-info.md
        echo "## Downloads" >> build-info.md
        echo "- Windows: rgupdate-windows" >> build-info.md
        echo "- Linux: rgupdate-linux" >> build-info.md
        
    - name: Upload build info
      uses: actions/upload-artifact@v4
      with:
        name: build-info
        path: build-info.md
        retention-days: 90

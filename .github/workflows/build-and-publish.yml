name: Build and Publish

# This workflow:
# 1. Runs unit tests first (fails fast if tests don't pass)
# 2. Only builds artifacts if tests pass
# 3. Creates cross-platform executables for Windows and Linux
# 4. Uploads test results and build artifacts
# 5. Can be triggered manually via workflow_dispatch with optional parameters

permissions:
  contents: write
  actions: read
  packages: write

on:
  push:
    branches: [ "main", "master", "develop" ]
  pull_request:
    branches: [ "main", "master" ]
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a GitHub release (only works on main branch)'
        required: false
        default: true
        type: boolean
      run_tests:
        description: 'Run tests before building'
        required: false
        default: true
        type: boolean

jobs:
  # test-linux:
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 10
  #   
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4

  #   - name: Setup .NET
  #     uses: actions/setup-dotnet@v4
  #     with:
  #       dotnet-version: '9.0.x'

  #   - name: Restore dependencies
  #     run: dotnet restore rgupdate.sln --verbosity normal

  #   - name: Build for testing
  #     run: dotnet build rgupdate.sln --configuration Release --no-restore --verbosity normal

  #   - name: Run cross-platform tests
  #     run: dotnet test rgupdate.sln --configuration Release --no-build --verbosity normal --logger trx --results-directory ./TestResults --filter "FullyQualifiedName!~WindowsPathHandlingTests"

  #   - name: Upload test results
  #     uses: actions/upload-artifact@v4
  #     if: always()
  #     with:
  #       name: test-results-linux
  #       path: ./TestResults/*.trx
  #       retention-days: 30

  test-windows:
    runs-on: windows-latest
    timeout-minutes: 15
    if: github.event_name != 'workflow_dispatch' || inputs.run_tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Restore dependencies
      run: dotnet restore rgupdate.sln --verbosity normal

    - name: Build for testing
      run: dotnet build rgupdate.sln --configuration Release --no-restore --verbosity normal

    - name: Run Windows-specific PATH tests
      run: dotnet test rgupdate.sln --configuration Release --no-build --verbosity normal --logger trx --results-directory ./TestResults --filter "FullyQualifiedName~WindowsPathHandlingTests"

    - name: Upload Windows test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-windows
        path: ./TestResults/*.trx
        retention-days: 30

  build:
    needs: [test-windows]
    if: always() && (needs.test-windows.result == 'success' || needs.test-windows.result == 'skipped')
    timeout-minutes: 30
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        include:
          - os: windows-latest
            runtime: win-x64
            artifact-name: rgupdate-windows
            executable-extension: .exe
          - os: ubuntu-latest
            runtime: linux-x64
            artifact-name: rgupdate-linux
            executable-extension: ""

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Restore dependencies
      run: dotnet restore rgupdate.sln --verbosity normal
      env:
        DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER: 0

    - name: Build
      run: dotnet build rgupdate.sln --configuration Release --no-restore --verbosity normal

    - name: Publish
      run: dotnet publish src/rgupdate/rgupdate.csproj --configuration Release --runtime ${{ matrix.runtime }} --self-contained true --output ./publish/${{ matrix.runtime }}

    - name: Create artifact directory
      shell: bash
      run: |
        mkdir -p ./artifacts
        # For single-file executables, just copy the main executable
        if [ "${{ matrix.runtime }}" = "win-x64" ]; then
          cp ./publish/${{ matrix.runtime }}/rgupdate.exe ./artifacts/
        else
          cp ./publish/${{ matrix.runtime }}/rgupdate ./artifacts/
        fi
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact-name }}
        path: ./artifacts/
        retention-days: 90

  create-release-info:
    needs: [test-windows, build]
    if: |
      always() && 
      needs.build.result == 'success' && 
      (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create build info
      run: |
        echo "# Build Information" > build-info.md
        echo "" >> build-info.md
        echo "**Commit:** ${{ github.sha }}" >> build-info.md
        echo "**Branch:** ${{ github.ref_name }}" >> build-info.md
        echo "**Build Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> build-info.md
        echo "**Workflow:** ${{ github.workflow }}" >> build-info.md
        echo "**Run Number:** ${{ github.run_number }}" >> build-info.md
        echo "" >> build-info.md
        echo "## Downloads" >> build-info.md
        echo "- Windows: rgupdate-windows" >> build-info.md
        echo "- Linux: rgupdate-linux" >> build-info.md
        
    - name: Upload build info
      uses: actions/upload-artifact@v4
      with:
        name: build-info
        path: build-info.md
        retention-days: 90

  create-release:
    needs: [test-windows, build, create-release-info]
    runs-on: ubuntu-latest
    if: |
      always() && 
      needs.build.result == 'success' && 
      (
        (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
        (github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main' && inputs.create_release)
      )
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./downloads
    
    - name: Prepare release assets
      run: |
        mkdir -p ./release-assets
        
        # Copy Windows executable
        cp ./downloads/rgupdate-windows/rgupdate.exe ./release-assets/rgupdate-windows.exe
        
        # Copy Linux executable  
        cp ./downloads/rgupdate-linux/rgupdate ./release-assets/rgupdate-linux
        
        # Copy build info
        cp ./downloads/build-info/build-info.md ./release-assets/
        
        # List what we have
        ls -la ./release-assets/
    
    - name: Generate release tag
      id: tag
      run: |
        # Generate a timestamp-based tag for the release
        BUILD_DATE=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
        TAG="build-$(date -u +%Y%m%d-%H%M%S)-${{ github.run_number }}"
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "build_date=$BUILD_DATE" >> $GITHUB_OUTPUT
        echo "Generated tag: $TAG"
        echo "Build date: $BUILD_DATE"
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.tag.outputs.tag }}
        name: "Latest Build - ${{ steps.tag.outputs.tag }}"
        body: |
          # rgupdate - Latest Build
          
          **Commit:** ${{ github.sha }}
          **Branch:** ${{ github.ref_name }}
          **Build Date:** ${{ steps.tag.outputs.build_date }}
          **Workflow Run:** [${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          ## Quick Download Links
          
          - **Windows:** [rgupdate-windows.exe](https://github.com/${{ github.repository }}/releases/latest/download/rgupdate-windows.exe)
          - **Linux:** [rgupdate-linux](https://github.com/${{ github.repository }}/releases/latest/download/rgupdate-linux)
          
          ## Installation
          
          ### Windows (PowerShell)
          ```powershell
          # Download and run directly
          Invoke-WebRequest -Uri "https://github.com/${{ github.repository }}/releases/latest/download/rgupdate-windows.exe" -OutFile "rgupdate.exe"
          ./rgupdate.exe --help
          ```
          
          ### Linux
          ```bash
          # Download and make executable
          curl -L -o rgupdate "https://github.com/${{ github.repository }}/releases/latest/download/rgupdate-linux"
          chmod +x rgupdate
          ./rgupdate --help
          ```
          
          ---
          *This is an automated build from the latest commit on the main branch.*
        files: |
          ./release-assets/rgupdate-windows.exe
          ./release-assets/rgupdate-linux
          ./release-assets/build-info.md
        make_latest: true
        prerelease: false
        generate_release_notes: false
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
